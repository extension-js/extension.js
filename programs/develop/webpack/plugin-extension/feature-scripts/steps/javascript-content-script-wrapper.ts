import * as path from 'path'
import * as fs from 'fs'

// Extract CSS imports from the source file
function extractCSSImports(source: string): string[] {
  const cssImports: string[] = []

  // Split source into lines and process each line
  const lines = source.split('\n')

  // Match various CSS import patterns (excluding commented lines)
  const cssImportPatterns = [
    /^\s*import\s+['"]([^'"]*\.(?:css|scss|sass|less|module\.css))['"]/,
    /^\s*import\s+['"]([^'"]*\.(?:css|scss|sass|less|module\.css))['"]\s*;?\s*$/,
    /^\s*import\s+['"]([^'"]*\.(?:css|scss|sass|less|module\.css))['"]\s*from\s+['"][^'"]*['"]/
  ]

  for (const line of lines) {
    // Skip commented lines
    const trimmedLine = line.trim()
    if (trimmedLine.startsWith('//') || trimmedLine.startsWith('/*')) {
      continue
    }

    for (const pattern of cssImportPatterns) {
      const match = pattern.exec(line)
      if (match) {
        const cssPath = match[1]
        if (cssPath && !cssImports.includes(cssPath)) {
          cssImports.push(cssPath)
        }
      }
    }
  }

  return cssImports
}

export function generateJavaScriptWrapperCode(
  source: string,
  resourcePath: string
): string {
  const fileName = path.basename(resourcePath, path.extname(resourcePath))
  const cssImports = extractCSSImports(source)
  const resourceDir = path.dirname(resourcePath)

  if (process.env.EXTENSION_ENV === 'development') {
    console.log(
      `[Extension.js] Detected JavaScript framework with CSS imports:`,
      cssImports
    )
  }

  // Read CSS content at build time for hardcoding
  const cssContentMap: Record<string, string> = {}
  for (const cssImport of cssImports) {
    try {
      const cssPath = path.resolve(resourceDir, cssImport)
      if (fs.existsSync(cssPath)) {
        const cssContent = fs.readFileSync(cssPath, 'utf-8')
        // Escape the CSS content for JavaScript string
        const escapedCSS = cssContent
          .replace(/\\/g, '\\\\')
          .replace(/`/g, '\\`')
          .replace(/\${/g, '\\${')
          .replace(/\n/g, ' ')
          .replace(/\s+/g, ' ')
          .trim()
        cssContentMap[cssImport] = escapedCSS
        if (process.env.EXTENSION_ENV === 'development') {
          console.log(
            `[Extension.js] Read CSS content for ${cssImport}, length: ${cssContent.length}`
          )
        }
      } else {
        if (process.env.EXTENSION_ENV === 'development') {
          console.warn(`[Extension.js] CSS file not found: ${cssPath}`)
        }
      }
    } catch (error) {
      if (process.env.EXTENSION_ENV === 'development') {
        console.warn(
          `[Extension.js] Failed to read CSS file ${cssImport}:`,
          error
        )
      }
    }
  }

  // Generate JavaScript-compatible wrapper code
  const wrapperCode = `
// JavaScript Content Script Wrapper - Auto-generated by Extension.js
// This wrapper provides Shadow DOM isolation and CSS injection for JavaScript content scripts

// Original JavaScript content script source (directive processed)
${source.replace(/'use shadow-dom'/g, "// 'use shadow-dom'").replace(/"use shadow-dom"/g, '// "use shadow-dom"')}

// Content script wrapper class
class JavaScriptContentScriptWrapper {
  constructor(renderFunction, options = {}) {
    this.renderFunction = renderFunction
    this.options = {
      rootElement: 'extension-root',
      rootClassName: undefined,
      stylesheets: ${JSON.stringify(cssImports.length > 0 ? cssImports : ['./styles.css'])},
      ...options
    }
    this.rootElement = null
    this.shadowRoot = null
    this.styleElement = null
    this.unmountFunction = null
  }

  async mount(container) {
    console.log('[Extension.js] JavaScript wrapper mount called')
    if (this.rootElement) {
      this.unmount()
    }

    // Create root element
    this.rootElement = container || document.createElement('div')
    this.rootElement.id = this.options.rootElement
    if (this.options.rootClassName) {
      this.rootElement.className = this.options.rootClassName
    }

    // Create shadow root for style isolation
    this.shadowRoot = this.rootElement.attachShadow({ mode: 'open' })

    // Inject styles FIRST
    console.log('[Extension.js] About to inject styles')
    await this.injectStyles()

    // Render content using the original contentScript function
    console.log('[Extension.js] About to render JavaScript content')
    const result = this.renderFunction(this.shadowRoot)
    if (typeof result === 'function') {
      this.unmountFunction = result
    }

    // Append to document if no container provided
    if (!container) {
      document.body.appendChild(this.rootElement)
    }
    
    console.log('[Extension.js] JavaScript wrapper mount complete')
  }

  unmount() {
    if (this.unmountFunction) {
      this.unmountFunction()
      this.unmountFunction = null
    }

    if (this.rootElement && this.rootElement.parentNode) {
      this.rootElement.parentNode.removeChild(this.rootElement)
    }

    this.rootElement = null
    this.shadowRoot = null
    this.styleElement = null
  }

  async injectStyles() {
    console.log('[Extension.js] JavaScript injectStyles called')
    const targetRoot = this.shadowRoot || this.rootElement

    // Create style element
    this.styleElement = document.createElement('style')
    targetRoot.appendChild(this.styleElement)

    // Fetch CSS content
    try {
      console.log('[Extension.js] About to fetch CSS')
      const cssContent = await this.fetchCSS()
      console.log('[Extension.js] CSS fetched, length:', cssContent.length)
      this.styleElement.textContent = cssContent
      console.log('[Extension.js] JavaScript CSS injected successfully')
    } catch (error) {
      console.error('[Extension.js] Failed to inject JavaScript CSS:', error)
    }

    // Setup HMR for CSS files
    this.setupCSSHMR()
  }

  async fetchCSS() {
    let allCSS = ''
    
    console.log('[Extension.js] Processing JavaScript stylesheets:', this.options.stylesheets)
    
    // CSS content map is injected at build time
    const cssContentMap = ${JSON.stringify(cssContentMap)}
    
    for (const stylesheet of this.options.stylesheets) {
      try {
        console.log('[Extension.js] Processing JavaScript stylesheet:', stylesheet)
        // Check if we have hardcoded content for this stylesheet
        if (cssContentMap[stylesheet]) {
          const cssContent = cssContentMap[stylesheet]
          allCSS += cssContent + '\\n'
          console.log(\`[Extension.js] Successfully injected JavaScript \${stylesheet} content\`)
          continue
        }
        
        // For stylesheets without hardcoded content, try to fetch them
        const cssUrl = new URL(stylesheet, import.meta.url)
        const response = await fetch(cssUrl)
        const text = await response.text()
        if (response.ok) {
          allCSS += text + '\\n'
          console.log('[Extension.js] Successfully fetched stylesheet:', stylesheet)
        } else {
          console.warn('[Extension.js] Failed to fetch CSS:', stylesheet)
        }
      } catch (error) {
        console.warn('[Extension.js] Failed to fetch JavaScript CSS:', stylesheet, error)
      }
    }
    
    return allCSS
  }

  setupCSSHMR() {
    if (!import.meta.webpackHot) return

    // Setup HMR for each CSS file
    for (const stylesheet of this.options.stylesheets) {
      import.meta.webpackHot?.accept(stylesheet, async () => {
        try {
          const cssContent = await this.fetchCSS()
          if (this.styleElement) {
            this.styleElement.textContent = cssContent
            console.log('[Extension.js] JavaScript CSS updated via HMR:', stylesheet)
          }
        } catch (error) {
          console.error('[Extension.js] Failed to update JavaScript CSS via HMR:', stylesheet, error)
        }
      })
    }
  }
}

// Initialize JavaScript content script with wrapper
function initializeJavaScriptContentScript(options, renderFunction) {
  const wrapper = new JavaScriptContentScriptWrapper(renderFunction, options)
  
  return {
    mount: (container) => wrapper.mount(container),
    unmount: () => wrapper.unmount()
  }
}

// Simple initialization for JavaScript
let __extensionjs_unmount

async function initialize() {
  console.log('[Extension.js] JavaScript wrapper initialize called')
  if (__extensionjs_unmount) {
    console.log('[Extension.js] Unmounting previous JavaScript instance')
    __extensionjs_unmount()
  }
  
  // Get the render function from the default export if provided
  const renderFunction = typeof __extensionjs_default === 'function' ? __extensionjs_default({}) : undefined
  if (!renderFunction) return
  const wrapper = new JavaScriptContentScriptWrapper(renderFunction, {})
  await wrapper.mount()
  __extensionjs_unmount = () => wrapper.unmount()
  console.log('[Extension.js] JavaScript wrapper initialization complete')
}

if (import.meta.webpackHot) {
  import.meta.webpackHot?.accept()
  import.meta.webpackHot?.dispose(() => __extensionjs_unmount?.())

  // Accept changes to this file
  import.meta.webpackHot?.accept(() => {
    initialize()
  })
}

if (document.readyState === 'complete') {
  initialize()
} else {
  document.addEventListener('readystatechange', () => {
    if (document.readyState === 'complete') {
      initialize()
    }
  })
}

export default JavaScriptContentScriptWrapper
`

  return wrapperCode
}
